name: Fetch Projects and Columns

on:
  workflow_dispatch: # Manual trigger
  push: # Trigger on push events

jobs:
  get-project-id:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Project ID
        id: fetch_project_id
        run: |
          # Query to fetch project ID
          $query = '{organization(login:"brownfield-team"){projectsV2(first:100){nodes{id,title,updatedAt}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Projects JSON Output: $($response.Content)"
          $projects = $response.Content | ConvertFrom-Json
          $projectID = $projects.data.organization.projectsV2.nodes | Where-Object { $_.title -like "*s24-4pm-1*" } | Select-Object -First 1 -ExpandProperty id

          if (-not $projectID) {
              Write-Host "No project found for team s24-4pm-1."
              exit 1
          }

          Write-Host "Found Project ID: $projectID"
          "project_id=$projectID" | Out-File -FilePath $env:GITHUB_ENV -Append  # Set output in the new way

  get-project-columns:
    name: Get Project Board Columns
    needs: get-project-id
    runs-on: ubuntu-latest
    outputs:
      columns: ${{ steps.project_columns.outputs.columns }}
    steps:
      - name: Fetch Project Board Columns
        id: project_columns
        run: |
          PROJECT_ID=${{ needs.get-project-id.outputs.project_id }}
          $query = "{
            node(id: `"$PROJECT_ID`") {
              ... on ProjectV2 {
                columns(first: 100) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          }"

          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Columns JSON Output: $($response.Content)"
          
          # Extract columns from response
          $columns = $response.Content | ConvertFrom-Json
          $columnData = $columns.data.node.columns.nodes | ConvertTo-Json

          # Output columns
          echo "::set-output name=columns::$columnData"
