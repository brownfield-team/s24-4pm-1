
name: Get Project Data and Count Issues by Column

on:
  push:
    branches:
      - main  # Adjust the branch name as needed
  workflow_dispatch:  # Manual trigger

jobs:
  get-project-id:
    name: Get Project ID
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.get_id.outputs.project_id }}
    steps:
      - name: Fetch Project ID
        id: get_id
        shell: pwsh
        run: |
          # GraphQL query to fetch project ID
          $query = '{organization(login:"brownfield-team"){projectsV2(first:100){nodes{id,title,updatedAt}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.PAT }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Projects JSON Output: $($response.Content)"
          
          # Find the project ID based on title
          $projectID = ($response.Content | ConvertFrom-Json).data.organization.projectsV2.nodes | Where-Object { $_.title -like "*s24-4pm-1*" } | Select-Object -First 1 -ExpandProperty id
          
          if (-not $projectID) {
              Write-Host "No project found for team s24-4pm-1."
              exit 1
          }
          
          Write-Host "Found Project ID: $projectID"
          echo "::set-output name=project_id::$projectID"  # Correctly set project_id output

  count_issues:
    name: Count Issues by Column and Assignee
    runs-on: ubuntu-latest
    needs: get-project-id  # Ensure this job runs after fetching the project ID
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Count Issues by Column and Assignee
        id: count_issues
        shell: pwsh
        env:
          project_id: ${{ needs.get-project-id.outputs.project_id }}  # Use project ID from previous job
          PAT: ${{ secrets.PAT }}  # Ensure PAT is available
        run: |
          $PROJECT_ID = $env:project_id; $TOKEN = $env:PAT; $query = "{ node(id: `"$PROJECT_ID`") { ... on ProjectV2 { items(first: 100) { nodes { id fieldValues(first: 100) { nodes { ... on ProjectV2ItemFieldSingleSelectValue { field { ... on ProjectV2Field { name } } name } ... on ProjectV2ItemFieldTextValue { field { ... on ProjectV2Field { name } } text } } } content { ... on Issue { title assignees(first: 10) { nodes { login } } } ... on PullRequest { title assignees(first: 10) { nodes { login } } } } } } } } } }"; $headers = @{ Authorization = "Bearer $TOKEN"; "Content-Type" = "application/json" }; $body = @{ query = $query } | ConvertTo-Json; $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body; $data = $response.Content | ConvertFrom-Json; $issueCounts = @{}; foreach ($item in $data.data.node.items.nodes) { $columnField = $item.fieldValues.nodes | Where-Object { $_.field.name -eq "Status" }; if ($null -ne $columnField) { $column = $columnField.name; if ($null -ne $column) { $assignees = $item.content.assignees.nodes | Select-Object -ExpandProperty login; foreach ($assignee in $assignees) { if (-not $issueCounts.ContainsKey($column)) { $issueCounts[$column] = @{} } if (-not $issueCounts[$column].ContainsKey($assignee)) { $issueCounts[$column][$assignee] = 0 } $issueCounts[$column][$assignee]++ } } } } foreach ($column in $issueCounts.Keys) { Write-Host "Column: $column"; foreach ($assignee in $issueCounts[$column].Keys) { Write-Host "  Assignee: $assignee, Count: $($issueCounts[$column][$assignee])" } }