name: Get Project Data

on:
  push:
    branches:
      - main  # Adjust the branch name as needed
  workflow_dispatch:  # Manual trigger

jobs:
  get-project-id:
    name: Get Project ID
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.get_id.outputs.project_id }}
    steps:
      - name: Fetch Project ID
        id: get_id
        shell: pwsh
        run: |
          # GraphQL query to fetch project ID
          $query = '{organization(login:"brownfield-team"){projectsV2(first:100){nodes{id,title,updatedAt}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Projects JSON Output: $($response.Content)"
          
          # Find the project ID based on title
          $projectID = ($response.Content | ConvertFrom-Json).data.organization.projectsV2.nodes | Where-Object { $_.title -like "*s24-4pm-1*" } | Select-Object -First 1 -ExpandProperty id
          
          if (-not $projectID) {
              Write-Host "No project found for team s24-4pm-1."
              exit 1
          }
          
          Write-Host "Found Project ID: $projectID"
          echo "::set-output name=project_id::$projectID"  # Correctly set project_id output

  get-project-columns:
    name: Get Project Columns
    runs-on: ubuntu-latest
    needs: get-project-id
    steps:
      - name: Fetch Project Columns
        shell: pwsh
        env:
          project_id: ${{ needs.get-project-id.outputs.project_id }}  # Ensure project_id is set as environment variable
        run: |
          # Retrieve the project ID from the environment variable
          $projectID = $env:project_id
          Write-Host "Using Project ID: $projectID"
          
          # Check if project ID is set
          if (-not $projectID) {
              Write-Host "Project ID not found. Exiting."
              exit 1
          }
          
          # GraphQL query to fetch project fields (title, column-like fields, etc.)
          $query = "{ node(id: `"$projectID`") { ... on ProjectV2 { title fields(first: 20) { nodes { ... on ProjectV2Field { id name dataType } } } } } }"
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Fields JSON Output: $($response.Content)"
          
          # Parse and display fields for debugging
          $fields = $response.Content | ConvertFrom-Json
          $fieldsData = $fields.data.node.fields.nodes | ConvertTo-Json
          
          # Output field data for use in later steps or jobs
          echo "::set-output name=fields::$fieldsData"
