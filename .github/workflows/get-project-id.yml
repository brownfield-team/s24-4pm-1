
name: Get Project Data and Count Issues by Column

on:
  push:
    branches:
      - main  # Adjust the branch name as needed
  workflow_dispatch:  # Manual trigger

jobs:
  get-project-id:
    name: Get Project ID
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.get_id.outputs.project_id }}
    steps:
      - name: Fetch Project ID
        id: get_id
        shell: pwsh
        run: |
          # GraphQL query to fetch project ID
          $query = '{organization(login:"brownfield-team"){projectsV2(first:100){nodes{id,title,updatedAt}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Projects JSON Output: $($response.Content)"
          
          # Find the project ID based on title
          $projectID = ($response.Content | ConvertFrom-Json).data.organization.projectsV2.nodes | Where-Object { $_.title -like "*s24-4pm-1*" } | Select-Object -First 1 -ExpandProperty id
          
          if (-not $projectID) {
              Write-Host "No project found for team s24-4pm-1."
              exit 1
          }
          
          Write-Host "Found Project ID: $projectID"
          echo "::set-output name=project_id::$projectID"  # Correctly set project_id output

  count_issues:
    name: Output GraphQL Query Result
    runs-on: ubuntu-latest
    needs: get-project-id  # Ensure this job runs after fetching the project ID
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Output GraphQL Query Result
        id: output_query
        shell: pwsh
        env:
          project_id: ${{ needs.get-project-id.outputs.project_id }}  # Use project ID from previous job
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure GITHUB_TOKEN is available
        run: |
          # Retrieve the project ID from the environment variable
          $projectID = $env:project_id
          Write-Host "Using Project ID: $projectID"
          
          # Check if project ID is set
          if (-not $projectID) {
              Write-Host "Project ID not found. Exiting."
              exit 1
          }

          # Prepare GraphQL headers
          $headers = @{
              Authorization = "Bearer $env:GITHUB_TOKEN"
              "Content-Type" = "application/json"
          }

          # Condensed GraphQL query to fetch project columns and their issues
          $columnsQuery = @"
          {
            node(id: `"$($projectID)`") {
              ... on ProjectV2 {
                columns(first: 10) {
                  nodes {
                    id
                    name
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            title
                            assignees(first: 10) {
                              nodes {
                                login
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          "@

          # Send request to fetch columns
          $columnsResponse = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body (@{ query = $columnsQuery } | ConvertTo-Json)

          # Output the response
          Write-Host "Columns JSON Output: $($columnsResponse.Content)"