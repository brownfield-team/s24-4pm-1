name: Get Project data

on:
  push:
    branches:
      - main  # Adjust the branch name as needed
  workflow_dispatch:  # Manual trigger

jobs:
  get-project-id:
    name: Get Project ID
    runs-on: ubuntu-latest
    outputs:
      project_id: ${{ steps.get_id.outputs.project_id }}
    steps:
      - name: Fetch Project ID
        id: get_id
        shell: pwsh
        run: |
          # GraphQL query to fetch project ID
          $query = '{organization(login:"brownfield-team"){projectsV2(first:100){nodes{id,title,updatedAt}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Projects JSON Output: $($response.Content)"
          
          # Find the project ID based on title
          $projectID = ($response.Content | ConvertFrom-Json).data.organization.projectsV2.nodes | Where-Object { $_.title -like "*s24-4pm-1*" } | Select-Object -First 1 -ExpandProperty id
          
          if (-not $projectID) {
              Write-Host "No project found for team s24-4pm-1."
              exit 1
          }
          
          Write-Host "Found Project ID: $projectID"
          echo "::set-output name=project_id::$projectID"  # Set output for use in the next job

  get-project-columns:
    name: Get Project Columns
    runs-on: ubuntu-latest
    needs: get-project-id
    steps:
      - name: Fetch Project Columns
        shell: pwsh
        run: |
          # Retrieve the project ID from the previous job
          $projectID = '${{ needs.get-project-id.outputs.project_id }}'
          Write-Host "Using Project ID: $projectID"

          # GraphQL query to fetch columns
          $query = '{node(id:"'$projectID'"){... on ProjectV2{fields(first:10){nodes{id,name}}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Columns JSON Output: $($response.Content)"
