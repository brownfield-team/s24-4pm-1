name: GitHub Project Workflow

on:
  push:
    branches:
      - main  # Change this to your target branch if necessary
  workflow_dispatch:  # Manual trigger

jobs:
  get-project-id:
    runs-on: ubuntu-latest
    steps:
      - name: Get Project ID
        id: get_project_id
        shell: pwsh
        run: |
          # Query to fetch project ID
          $query = '{organization(login:"brownfield-team"){projectsV2(first:100){nodes{id,title,updatedAt}}}}'
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          $body = @{ query = $query } | ConvertTo-Json
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          Write-Host "Projects JSON Output: $($response.Content)"
          $projects = $response.Content | ConvertFrom-Json
          $projectID = $projects.data.organization.projectsV2.nodes | Where-Object { $_.title -like "*s24-4pm-1*" } | Select-Object -First 1 -ExpandProperty id
          
          if (-not $projectID) {
              Write-Host "No project found for team s24-4pm-1."
              exit 1
          }

          Write-Host "Found Project ID: $projectID"
          echo "::set-output name=project_id::$projectID"

  get-project-columns:
    name: Get Project Board Columns
    needs: get-project-id
    runs-on: ubuntu-latest
    outputs:
      columns: ${{ steps.project_columns.outputs.columns }}
    steps:
      - name: Fetch Project Board Columns
        id: project_columns
        shell: pwsh
        run: |
          # Get the Project ID from the previous step's output
          $PROJECT_ID = "${{ needs.get-project-id.outputs.project_id }}"

          # Construct the GraphQL query
          $query = @"
          {
            node(id: "$PROJECT_ID") {
              ... on ProjectV2 {
                id
                title
                updatedAt
                fields(first: 100) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          }
          "@

          # Define headers with the authorization token
          $headers = @{
              Authorization = "Bearer ${{ secrets.GH_TOKEN }}"
              "Content-Type" = "application/json"
          }
          
          # Create the request body
          $body = @{ query = $query } | ConvertTo-Json
          
          # Send the request to the GitHub GraphQL API
          $response = Invoke-WebRequest -Uri "https://api.github.com/graphql" -Method Post -Headers $headers -Body $body
          
          # Output the response content for debugging
          Write-Host "Columns JSON Output: $($response.Content)"
          
          # Extract columns from response
          $columns = $response.Content | ConvertFrom-Json
          $columnData = $columns.data.node.fields.nodes | ConvertTo-Json
          
          # Set the output for columns
          echo "::set-output name=columns::$columnData"
