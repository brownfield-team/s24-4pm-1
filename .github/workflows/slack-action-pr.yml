# Creates/Resets the gh-pages branch to the intended start state

# Pre-requisites:
# (1) Create a slack app following these instructions:
#    https://docs.celigo.com/hc/en-us/articles/7140655476507-How-to-create-an-app-and-retrieve-OAuth-token-in-Slack
# (2) Add the OAuth scope chat:write
# (3) Create an OAuth token
# (4) Create a repository secret under "Secrets/Actions/Repository Secret" called
#   SLACK_BOT_USER_OAUTH_ACCESS_TOKEN  and put the value of the OAuth token there
# (5) Put the channel number in the env.CHANNEL_NUMBER variable below.
#   (or maybe refactor this into a repository secret? )
# (6) To test, merge a PR.

name: "81-pull-request-slack-msg: Send a slack message whenever there's a pull request"
on:
  pull_request:
    types:
      - closed

env:
  GH_TOKEN: ${{ github.token }}
  CHANNEL_NUMBER:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 1
          token: ${{ github.token }}

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # install the python version needed

      - name: install python packages
        run: |
          python -m pip install --upgrade pip
          # Install any other necessary packages here

  get-team-name:
    name: Get Team Name
    runs-on: ubuntu-latest
    outputs:
      team: ${{ steps.find_team.outputs.team }} # Changed from 'get-team-name' to 'find_team'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 1
          token: ${{ github.token }}
      - name: Run Python script to find team
        id: find_team
        run: echo "::set-output name=team::$(python .github/workflows/scripts/find_team.py)"
      - name: Debug - Print Team Name
        run: |
          echo "Team Name: ${{ steps.find_team.outputs.team }}"

  get-channel-number:
    name: Get Channel Number
    needs: get-team-name
    runs-on: ubuntu-latest
    outputs:
      channel_number: ${{ steps.find_channel.outputs.channel_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Debug - Print Get Team Name Output
        run: |
          echo "Get Team Name Output: ${{ needs.get-team-name.outputs.team }}"
      - name: Set Team Environment Variable
        run: echo "TEAM=${{ needs.get-team-name.outputs.team }}" >> $GITHUB_ENV
      - name: Debug - Print GitHub Env
        run: cat $GITHUB_ENV
      - name: Debug - Print Team
        run: |
          echo "Team: ${{ env.TEAM }}"
      - name: Find Channel Number
        id: find_channel
        run: |
          CHANNEL_NUMBER=$(python .github/workflows/scripts/find_channel.py)
          echo "CHANNEL_NUMBER=${CHANNEL_NUMBER}" >> $GITHUB_ENV
          echo "::set-output name=channel_number::${CHANNEL_NUMBER}"
      - name: Debug - Print Channel Number
        run: |
          echo "Channel Number: ${{ steps.find_channel.outputs.channel_number }}"

  get-pr-num:
    name: Get PR Number
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get-pr-num.outputs.pr_number }}
      branch_name: ${{ steps.get-branch-name.outputs.branch_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 1
          token: ${{ github.token }}
      - name: Get PR number
        id: get-pr-num
        run: |
          echo "GITHUB_EVENT_PATH=${GITHUB_EVENT_PATH}"
          pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "pr_number=${pr_number}" 
          echo "pr_number=${pr_number}" >> "$GITHUB_OUTPUT"
      - name: Figure out Branch name
        id: get-branch-name
        run: |
          GITHUB_HEAD_REF="${GITHUB_HEAD_REF}"
          echo GITHUB_HEAD_REF=${GITHUB_HEAD_REF}
          GITHUB_REF_CLEANED=${GITHUB_REF/refs\/heads\//}
          echo GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED}
          GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED//\//-}
          echo GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED}
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_CLEANED}}"
          echo "branch_name=${BRANCH}"
          echo "branch_name=${BRANCH}" >> "$GITHUB_OUTPUT"

  # TODO:
  # Also consider pulling the github usernames associated with the PR
  # and using a lookup table to convert those into slack names, and then
  # send customized DMs to the users directly.

  if_merged:
    needs: [get-pr-num, get-channel-number]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: |
          pr_number=${{needs.get-pr-num.outputs.pr_number}}
          echo The PR ${pr_number} was merged

      - name: Send message to Slack API
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ needs.get-channel-number.outputs.channel_number }}
          slack-text: "Hello! PR https://github.com/${{github.repository}}/pull/${{needs.get-pr-num.outputs.pr_number}} was merged.  INSERT HERE: the action you want the student to take now."
      - name: Result from "Send Message"
        run: echo "The result was ${{ steps.notify.outputs.slack-result }}"

  if_not_merged:
    needs: [get-pr-num, get-channel-number]
    if: github.event.pull_request.merged != true
    runs-on: ubuntu-latest
    steps:
      - run: |
          pr_number=${{needs.get-pr-num.outputs.pr_number}}
          echo The PR ${pr_number} was closed and not merged
      - name: Send message to Slack API
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ env.CHANNEL_NUMBER }}
          slack-text: "Hello! PR https://github.com/${{github.repository}}/pull/${{needs.get-pr-num.outputs.pr_number}} was closed without merging.  INSERT HERE: the action you want the student to take now."
      - name: Result from "Send Message"
        run: echo "The result was ${{ steps.notify.outputs.slack-result }}"
